
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA CONNECT DIV EQUAL EXP LBRACKET LPAREN MINUS NUMBER PLUS RBRACKET RPAREN STRING TIMES VARIABLE\n    assignment : VARIABLE EQUAL expression\n    \n    assignment : VARIABLE EQUAL flow\n    \n    flow : VARIABLE CONNECT flow_functions\n    \n    flow_functions : flow_function_call CONNECT flow_functions\n    \n    flow_functions : flow_function_call\n    \n    flow_function_call : VARIABLE LPAREN params RPAREN\n    \n    flow : NUMBER CONNECT aggregation_functions\n    \n    aggregation_functions : aggregation_function_call CONNECT aggregation_functions\n    \n    aggregation_functions : aggregation_function_call\n    \n    aggregation_function_call : NUMBER LPAREN params RPAREN\n    \n    assignment : expression\n    \n    expression : term\n                | string_def\n    \n    string_def : STRING\n    \n    expression : expression PLUS term\n    \n    expression : expression MINUS term\n    \n    term : exponent\n    \n    term : term TIMES exponent\n    \n    term : term DIV exponent\n    \n    exponent : factor\n    \n    exponent : factor EXP factor\n    \n    factor : NUMBER\n    \n    factor : VARIABLE\n    \n    factor : LPAREN expression RPAREN\n    \n    factor : function_call\n    \n    function_call : VARIABLE LPAREN RPAREN\n    \n    function_call : VARIABLE LPAREN params RPAREN\n    \n    params : params COMMA expression\n            | expression\n    '
    
_lr_action_items = {'VARIABLE':([0,10,12,13,14,15,16,17,18,34,37,45,46,47,],[2,20,21,20,20,20,20,20,20,38,20,20,38,20,]),'STRING':([0,10,12,13,37,45,47,],[7,7,7,7,7,7,7,]),'NUMBER':([0,10,12,13,14,15,16,17,18,35,37,45,47,48,],[9,9,24,9,9,9,9,9,9,41,9,9,9,41,]),'LPAREN':([0,2,10,12,13,14,15,16,17,18,20,21,37,38,41,45,47,],[10,13,10,10,10,10,10,10,10,10,13,13,10,45,47,10,10,]),'$end':([1,2,3,4,5,6,7,8,9,11,20,21,22,23,24,25,28,29,30,31,32,33,36,39,40,42,43,50,52,53,54,],[0,-23,-11,-12,-13,-17,-14,-20,-22,-25,-23,-23,-1,-2,-22,-26,-15,-16,-18,-19,-21,-24,-27,-3,-5,-7,-9,-4,-8,-6,-10,]),'EQUAL':([2,],[12,]),'EXP':([2,8,9,11,20,21,24,25,33,36,],[-23,18,-22,-25,-23,-23,-22,-26,-24,-27,]),'TIMES':([2,4,6,8,9,11,20,21,24,25,28,29,30,31,32,33,36,],[-23,16,-17,-20,-22,-25,-23,-23,-22,-26,16,16,-18,-19,-21,-24,-27,]),'DIV':([2,4,6,8,9,11,20,21,24,25,28,29,30,31,32,33,36,],[-23,17,-17,-20,-22,-25,-23,-23,-22,-26,17,17,-18,-19,-21,-24,-27,]),'PLUS':([2,3,4,5,6,7,8,9,11,19,20,21,22,24,25,27,28,29,30,31,32,33,36,44,],[-23,14,-12,-13,-17,-14,-20,-22,-25,14,-23,-23,14,-22,-26,14,-15,-16,-18,-19,-21,-24,-27,14,]),'MINUS':([2,3,4,5,6,7,8,9,11,19,20,21,22,24,25,27,28,29,30,31,32,33,36,44,],[-23,15,-12,-13,-17,-14,-20,-22,-25,15,-23,-23,15,-22,-26,15,-15,-16,-18,-19,-21,-24,-27,15,]),'RPAREN':([4,5,6,7,8,9,11,13,19,20,25,26,27,28,29,30,31,32,33,36,44,49,51,],[-12,-13,-17,-14,-20,-22,-25,25,33,-23,-26,36,-29,-15,-16,-18,-19,-21,-24,-27,-28,53,54,]),'COMMA':([4,5,6,7,8,9,11,20,25,26,27,28,29,30,31,32,33,36,44,49,51,],[-12,-13,-17,-14,-20,-22,-25,-23,-26,37,-29,-15,-16,-18,-19,-21,-24,-27,-28,37,37,]),'CONNECT':([21,24,40,43,53,54,],[34,35,46,48,-6,-10,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'assignment':([0,],[1,]),'expression':([0,10,12,13,37,45,47,],[3,19,22,27,44,27,27,]),'term':([0,10,12,13,14,15,37,45,47,],[4,4,4,4,28,29,4,4,4,]),'string_def':([0,10,12,13,37,45,47,],[5,5,5,5,5,5,5,]),'exponent':([0,10,12,13,14,15,16,17,37,45,47,],[6,6,6,6,6,6,30,31,6,6,6,]),'factor':([0,10,12,13,14,15,16,17,18,37,45,47,],[8,8,8,8,8,8,8,8,32,8,8,8,]),'function_call':([0,10,12,13,14,15,16,17,18,37,45,47,],[11,11,11,11,11,11,11,11,11,11,11,11,]),'flow':([12,],[23,]),'params':([13,45,47,],[26,49,51,]),'flow_functions':([34,46,],[39,50,]),'flow_function_call':([34,46,],[40,40,]),'aggregation_functions':([35,48,],[42,52,]),'aggregation_function_call':([35,48,],[43,43,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> assignment","S'",1,None,None,None),
  ('assignment -> VARIABLE EQUAL expression','assignment',3,'p_assignment_assign','translator.py',126),
  ('assignment -> VARIABLE EQUAL flow','assignment',3,'p_assignment_flow','translator.py',140),
  ('flow -> VARIABLE CONNECT flow_functions','flow',3,'p_flow','translator.py',154),
  ('flow_functions -> flow_function_call CONNECT flow_functions','flow_functions',3,'p_flow_functions','translator.py',173),
  ('flow_functions -> flow_function_call','flow_functions',1,'p_flow_functions_alone','translator.py',190),
  ('flow_function_call -> VARIABLE LPAREN params RPAREN','flow_function_call',4,'p_flow_function_call','translator.py',197),
  ('flow -> NUMBER CONNECT aggregation_functions','flow',3,'p_aggregation','translator.py',213),
  ('aggregation_functions -> aggregation_function_call CONNECT aggregation_functions','aggregation_functions',3,'p_agregation_functions','translator.py',229),
  ('aggregation_functions -> aggregation_function_call','aggregation_functions',1,'p_aggregation_functions_alone','translator.py',244),
  ('aggregation_function_call -> NUMBER LPAREN params RPAREN','aggregation_function_call',4,'p_aggregation_call','translator.py',251),
  ('assignment -> expression','assignment',1,'p_assignment_expression','translator.py',267),
  ('expression -> term','expression',1,'p_expression_term','translator.py',274),
  ('expression -> string_def','expression',1,'p_expression_term','translator.py',275),
  ('string_def -> STRING','string_def',1,'p_string_def','translator.py',282),
  ('expression -> expression PLUS term','expression',3,'p_expression_plus','translator.py',289),
  ('expression -> expression MINUS term','expression',3,'p_expression_minus','translator.py',300),
  ('term -> exponent','term',1,'p_term_exponent','translator.py',311),
  ('term -> term TIMES exponent','term',3,'p_term_times','translator.py',318),
  ('term -> term DIV exponent','term',3,'p_term_divides','translator.py',329),
  ('exponent -> factor','exponent',1,'p_exponent_factor','translator.py',340),
  ('exponent -> factor EXP factor','exponent',3,'p_exponent_exp','translator.py',347),
  ('factor -> NUMBER','factor',1,'p_factor_num','translator.py',360),
  ('factor -> VARIABLE','factor',1,'p_factor_variable','translator.py',372),
  ('factor -> LPAREN expression RPAREN','factor',3,'p_factor_expr','translator.py',380),
  ('factor -> function_call','factor',1,'p_factor_function_call','translator.py',390),
  ('function_call -> VARIABLE LPAREN RPAREN','function_call',3,'p_function_call_no_params','translator.py',397),
  ('function_call -> VARIABLE LPAREN params RPAREN','function_call',4,'p_function_call_params','translator.py',405),
  ('params -> params COMMA expression','params',3,'p_params','translator.py',419),
  ('params -> expression','params',1,'p_params','translator.py',420),
]
