Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COLON
    LBRACKET
    RBRACKET

Grammar

Rule 0     S' -> assignment
Rule 1     assignment -> VARIABLE EQUAL expression
Rule 2     assignment -> VARIABLE EQUAL flow
Rule 3     flow -> VARIABLE CONNECT flow_functions
Rule 4     flow_functions -> flow_function_call CONNECT flow_functions
Rule 5     flow_functions -> flow_function_call
Rule 6     flow_function_call -> VARIABLE LPAREN params RPAREN
Rule 7     assignment -> VARIABLE EQUAL aggregation
Rule 8     aggregation -> NUMBER CONNECT aggregation_functions
Rule 9     aggregation_functions -> aggregation_function_call CONNECT aggregation_functions
Rule 10    aggregation_functions -> aggregation_function_call
Rule 11    aggregation_function_call -> NUMBER LPAREN params RPAREN
Rule 12    assignment -> expression
Rule 13    expression -> term
Rule 14    expression -> string_def
Rule 15    string_def -> STRING
Rule 16    expression -> expression PLUS term
Rule 17    expression -> expression MINUS term
Rule 18    term -> exponent
Rule 19    term -> term TIMES exponent
Rule 20    term -> term DIV exponent
Rule 21    exponent -> factor
Rule 22    exponent -> factor EXP factor
Rule 23    factor -> NUMBER
Rule 24    factor -> VARIABLE
Rule 25    factor -> LPAREN expression RPAREN
Rule 26    factor -> function_call
Rule 27    function_call -> VARIABLE LPAREN RPAREN
Rule 28    function_call -> VARIABLE LPAREN params RPAREN
Rule 29    params -> params COMMA expression
Rule 30    params -> expression

Terminals, with rules where they appear

COLON                : 
COMMA                : 29
CONNECT              : 3 4 8 9
DIV                  : 20
EQUAL                : 1 2 7
EXP                  : 22
LBRACKET             : 
LPAREN               : 6 11 25 27 28
MINUS                : 17
NUMBER               : 8 11 23
PLUS                 : 16
RBRACKET             : 
RPAREN               : 6 11 25 27 28
STRING               : 15
TIMES                : 19
VARIABLE             : 1 2 3 6 7 24 27 28
error                : 

Nonterminals, with rules where they appear

aggregation          : 7
aggregation_function_call : 9 10
aggregation_functions : 8 9
assignment           : 0
exponent             : 18 19 20
expression           : 1 12 16 17 25 29 30
factor               : 21 22 22
flow                 : 2
flow_function_call   : 4 5
flow_functions       : 3 4
function_call        : 26
params               : 6 11 28 29
string_def           : 14
term                 : 13 16 17 19 20

Parsing method: LALR

state 0

    (0) S' -> . assignment
    (1) assignment -> . VARIABLE EQUAL expression
    (2) assignment -> . VARIABLE EQUAL flow
    (7) assignment -> . VARIABLE EQUAL aggregation
    (12) assignment -> . expression
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 2
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    LPAREN          shift and go to state 10

    assignment                     shift and go to state 1
    expression                     shift and go to state 3
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 1

    (0) S' -> assignment .



state 2

    (1) assignment -> VARIABLE . EQUAL expression
    (2) assignment -> VARIABLE . EQUAL flow
    (7) assignment -> VARIABLE . EQUAL aggregation
    (24) factor -> VARIABLE .
    (27) function_call -> VARIABLE . LPAREN RPAREN
    (28) function_call -> VARIABLE . LPAREN params RPAREN

    EQUAL           shift and go to state 12
    EXP             reduce using rule 24 (factor -> VARIABLE .)
    TIMES           reduce using rule 24 (factor -> VARIABLE .)
    DIV             reduce using rule 24 (factor -> VARIABLE .)
    PLUS            reduce using rule 24 (factor -> VARIABLE .)
    MINUS           reduce using rule 24 (factor -> VARIABLE .)
    $end            reduce using rule 24 (factor -> VARIABLE .)
    LPAREN          shift and go to state 13


state 3

    (12) assignment -> expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term

    $end            reduce using rule 12 (assignment -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 4

    (13) expression -> term .
    (19) term -> term . TIMES exponent
    (20) term -> term . DIV exponent

    PLUS            reduce using rule 13 (expression -> term .)
    MINUS           reduce using rule 13 (expression -> term .)
    $end            reduce using rule 13 (expression -> term .)
    RPAREN          reduce using rule 13 (expression -> term .)
    COMMA           reduce using rule 13 (expression -> term .)
    TIMES           shift and go to state 16
    DIV             shift and go to state 17


state 5

    (14) expression -> string_def .

    PLUS            reduce using rule 14 (expression -> string_def .)
    MINUS           reduce using rule 14 (expression -> string_def .)
    $end            reduce using rule 14 (expression -> string_def .)
    RPAREN          reduce using rule 14 (expression -> string_def .)
    COMMA           reduce using rule 14 (expression -> string_def .)


state 6

    (18) term -> exponent .

    TIMES           reduce using rule 18 (term -> exponent .)
    DIV             reduce using rule 18 (term -> exponent .)
    PLUS            reduce using rule 18 (term -> exponent .)
    MINUS           reduce using rule 18 (term -> exponent .)
    $end            reduce using rule 18 (term -> exponent .)
    RPAREN          reduce using rule 18 (term -> exponent .)
    COMMA           reduce using rule 18 (term -> exponent .)


state 7

    (15) string_def -> STRING .

    PLUS            reduce using rule 15 (string_def -> STRING .)
    MINUS           reduce using rule 15 (string_def -> STRING .)
    $end            reduce using rule 15 (string_def -> STRING .)
    RPAREN          reduce using rule 15 (string_def -> STRING .)
    COMMA           reduce using rule 15 (string_def -> STRING .)


state 8

    (21) exponent -> factor .
    (22) exponent -> factor . EXP factor

    TIMES           reduce using rule 21 (exponent -> factor .)
    DIV             reduce using rule 21 (exponent -> factor .)
    PLUS            reduce using rule 21 (exponent -> factor .)
    MINUS           reduce using rule 21 (exponent -> factor .)
    $end            reduce using rule 21 (exponent -> factor .)
    RPAREN          reduce using rule 21 (exponent -> factor .)
    COMMA           reduce using rule 21 (exponent -> factor .)
    EXP             shift and go to state 18


state 9

    (23) factor -> NUMBER .

    EXP             reduce using rule 23 (factor -> NUMBER .)
    TIMES           reduce using rule 23 (factor -> NUMBER .)
    DIV             reduce using rule 23 (factor -> NUMBER .)
    PLUS            reduce using rule 23 (factor -> NUMBER .)
    MINUS           reduce using rule 23 (factor -> NUMBER .)
    $end            reduce using rule 23 (factor -> NUMBER .)
    RPAREN          reduce using rule 23 (factor -> NUMBER .)
    COMMA           reduce using rule 23 (factor -> NUMBER .)


state 10

    (25) factor -> LPAREN . expression RPAREN
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    expression                     shift and go to state 19
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 11

    (26) factor -> function_call .

    EXP             reduce using rule 26 (factor -> function_call .)
    TIMES           reduce using rule 26 (factor -> function_call .)
    DIV             reduce using rule 26 (factor -> function_call .)
    PLUS            reduce using rule 26 (factor -> function_call .)
    MINUS           reduce using rule 26 (factor -> function_call .)
    $end            reduce using rule 26 (factor -> function_call .)
    RPAREN          reduce using rule 26 (factor -> function_call .)
    COMMA           reduce using rule 26 (factor -> function_call .)


state 12

    (1) assignment -> VARIABLE EQUAL . expression
    (2) assignment -> VARIABLE EQUAL . flow
    (7) assignment -> VARIABLE EQUAL . aggregation
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (3) flow -> . VARIABLE CONNECT flow_functions
    (8) aggregation -> . NUMBER CONNECT aggregation_functions
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 21
    NUMBER          shift and go to state 25
    STRING          shift and go to state 7
    LPAREN          shift and go to state 10

    expression                     shift and go to state 22
    flow                           shift and go to state 23
    aggregation                    shift and go to state 24
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 13

    (27) function_call -> VARIABLE LPAREN . RPAREN
    (28) function_call -> VARIABLE LPAREN . params RPAREN
    (29) params -> . params COMMA expression
    (30) params -> . expression
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    RPAREN          shift and go to state 26
    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    params                         shift and go to state 27
    expression                     shift and go to state 28
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 14

    (16) expression -> expression PLUS . term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    term                           shift and go to state 29
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 15

    (17) expression -> expression MINUS . term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    term                           shift and go to state 30
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 16

    (19) term -> term TIMES . exponent
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    exponent                       shift and go to state 31
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 17

    (20) term -> term DIV . exponent
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    exponent                       shift and go to state 32
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 18

    (22) exponent -> factor EXP . factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    factor                         shift and go to state 33
    function_call                  shift and go to state 11

state 19

    (25) factor -> LPAREN expression . RPAREN
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term

    RPAREN          shift and go to state 34
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 20

    (24) factor -> VARIABLE .
    (27) function_call -> VARIABLE . LPAREN RPAREN
    (28) function_call -> VARIABLE . LPAREN params RPAREN

    EXP             reduce using rule 24 (factor -> VARIABLE .)
    TIMES           reduce using rule 24 (factor -> VARIABLE .)
    DIV             reduce using rule 24 (factor -> VARIABLE .)
    RPAREN          reduce using rule 24 (factor -> VARIABLE .)
    PLUS            reduce using rule 24 (factor -> VARIABLE .)
    MINUS           reduce using rule 24 (factor -> VARIABLE .)
    COMMA           reduce using rule 24 (factor -> VARIABLE .)
    $end            reduce using rule 24 (factor -> VARIABLE .)
    LPAREN          shift and go to state 13


state 21

    (3) flow -> VARIABLE . CONNECT flow_functions
    (24) factor -> VARIABLE .
    (27) function_call -> VARIABLE . LPAREN RPAREN
    (28) function_call -> VARIABLE . LPAREN params RPAREN

    CONNECT         shift and go to state 35
    EXP             reduce using rule 24 (factor -> VARIABLE .)
    TIMES           reduce using rule 24 (factor -> VARIABLE .)
    DIV             reduce using rule 24 (factor -> VARIABLE .)
    PLUS            reduce using rule 24 (factor -> VARIABLE .)
    MINUS           reduce using rule 24 (factor -> VARIABLE .)
    $end            reduce using rule 24 (factor -> VARIABLE .)
    LPAREN          shift and go to state 13


state 22

    (1) assignment -> VARIABLE EQUAL expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term

    $end            reduce using rule 1 (assignment -> VARIABLE EQUAL expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 23

    (2) assignment -> VARIABLE EQUAL flow .

    $end            reduce using rule 2 (assignment -> VARIABLE EQUAL flow .)


state 24

    (7) assignment -> VARIABLE EQUAL aggregation .

    $end            reduce using rule 7 (assignment -> VARIABLE EQUAL aggregation .)


state 25

    (8) aggregation -> NUMBER . CONNECT aggregation_functions
    (23) factor -> NUMBER .

    CONNECT         shift and go to state 36
    EXP             reduce using rule 23 (factor -> NUMBER .)
    TIMES           reduce using rule 23 (factor -> NUMBER .)
    DIV             reduce using rule 23 (factor -> NUMBER .)
    PLUS            reduce using rule 23 (factor -> NUMBER .)
    MINUS           reduce using rule 23 (factor -> NUMBER .)
    $end            reduce using rule 23 (factor -> NUMBER .)


state 26

    (27) function_call -> VARIABLE LPAREN RPAREN .

    EXP             reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    TIMES           reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    DIV             reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    PLUS            reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    MINUS           reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    $end            reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    RPAREN          reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)
    COMMA           reduce using rule 27 (function_call -> VARIABLE LPAREN RPAREN .)


state 27

    (28) function_call -> VARIABLE LPAREN params . RPAREN
    (29) params -> params . COMMA expression

    RPAREN          shift and go to state 37
    COMMA           shift and go to state 38


state 28

    (30) params -> expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term

    RPAREN          reduce using rule 30 (params -> expression .)
    COMMA           reduce using rule 30 (params -> expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 29

    (16) expression -> expression PLUS term .
    (19) term -> term . TIMES exponent
    (20) term -> term . DIV exponent

    PLUS            reduce using rule 16 (expression -> expression PLUS term .)
    MINUS           reduce using rule 16 (expression -> expression PLUS term .)
    $end            reduce using rule 16 (expression -> expression PLUS term .)
    RPAREN          reduce using rule 16 (expression -> expression PLUS term .)
    COMMA           reduce using rule 16 (expression -> expression PLUS term .)
    TIMES           shift and go to state 16
    DIV             shift and go to state 17


state 30

    (17) expression -> expression MINUS term .
    (19) term -> term . TIMES exponent
    (20) term -> term . DIV exponent

    PLUS            reduce using rule 17 (expression -> expression MINUS term .)
    MINUS           reduce using rule 17 (expression -> expression MINUS term .)
    $end            reduce using rule 17 (expression -> expression MINUS term .)
    RPAREN          reduce using rule 17 (expression -> expression MINUS term .)
    COMMA           reduce using rule 17 (expression -> expression MINUS term .)
    TIMES           shift and go to state 16
    DIV             shift and go to state 17


state 31

    (19) term -> term TIMES exponent .

    TIMES           reduce using rule 19 (term -> term TIMES exponent .)
    DIV             reduce using rule 19 (term -> term TIMES exponent .)
    PLUS            reduce using rule 19 (term -> term TIMES exponent .)
    MINUS           reduce using rule 19 (term -> term TIMES exponent .)
    $end            reduce using rule 19 (term -> term TIMES exponent .)
    RPAREN          reduce using rule 19 (term -> term TIMES exponent .)
    COMMA           reduce using rule 19 (term -> term TIMES exponent .)


state 32

    (20) term -> term DIV exponent .

    TIMES           reduce using rule 20 (term -> term DIV exponent .)
    DIV             reduce using rule 20 (term -> term DIV exponent .)
    PLUS            reduce using rule 20 (term -> term DIV exponent .)
    MINUS           reduce using rule 20 (term -> term DIV exponent .)
    $end            reduce using rule 20 (term -> term DIV exponent .)
    RPAREN          reduce using rule 20 (term -> term DIV exponent .)
    COMMA           reduce using rule 20 (term -> term DIV exponent .)


state 33

    (22) exponent -> factor EXP factor .

    TIMES           reduce using rule 22 (exponent -> factor EXP factor .)
    DIV             reduce using rule 22 (exponent -> factor EXP factor .)
    PLUS            reduce using rule 22 (exponent -> factor EXP factor .)
    MINUS           reduce using rule 22 (exponent -> factor EXP factor .)
    $end            reduce using rule 22 (exponent -> factor EXP factor .)
    RPAREN          reduce using rule 22 (exponent -> factor EXP factor .)
    COMMA           reduce using rule 22 (exponent -> factor EXP factor .)


state 34

    (25) factor -> LPAREN expression RPAREN .

    EXP             reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    DIV             reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    $end            reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 25 (factor -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 25 (factor -> LPAREN expression RPAREN .)


state 35

    (3) flow -> VARIABLE CONNECT . flow_functions
    (4) flow_functions -> . flow_function_call CONNECT flow_functions
    (5) flow_functions -> . flow_function_call
    (6) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 39

    flow_functions                 shift and go to state 40
    flow_function_call             shift and go to state 41

state 36

    (8) aggregation -> NUMBER CONNECT . aggregation_functions
    (9) aggregation_functions -> . aggregation_function_call CONNECT aggregation_functions
    (10) aggregation_functions -> . aggregation_function_call
    (11) aggregation_function_call -> . NUMBER LPAREN params RPAREN

    NUMBER          shift and go to state 42

    aggregation_functions          shift and go to state 43
    aggregation_function_call      shift and go to state 44

state 37

    (28) function_call -> VARIABLE LPAREN params RPAREN .

    EXP             reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    TIMES           reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    DIV             reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    PLUS            reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    MINUS           reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    RPAREN          reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)
    COMMA           reduce using rule 28 (function_call -> VARIABLE LPAREN params RPAREN .)


state 38

    (29) params -> params COMMA . expression
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    expression                     shift and go to state 45
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 39

    (6) flow_function_call -> VARIABLE . LPAREN params RPAREN

    LPAREN          shift and go to state 46


state 40

    (3) flow -> VARIABLE CONNECT flow_functions .

    $end            reduce using rule 3 (flow -> VARIABLE CONNECT flow_functions .)


state 41

    (4) flow_functions -> flow_function_call . CONNECT flow_functions
    (5) flow_functions -> flow_function_call .

    CONNECT         shift and go to state 47
    $end            reduce using rule 5 (flow_functions -> flow_function_call .)


state 42

    (11) aggregation_function_call -> NUMBER . LPAREN params RPAREN

    LPAREN          shift and go to state 48


state 43

    (8) aggregation -> NUMBER CONNECT aggregation_functions .

    $end            reduce using rule 8 (aggregation -> NUMBER CONNECT aggregation_functions .)


state 44

    (9) aggregation_functions -> aggregation_function_call . CONNECT aggregation_functions
    (10) aggregation_functions -> aggregation_function_call .

    CONNECT         shift and go to state 49
    $end            reduce using rule 10 (aggregation_functions -> aggregation_function_call .)


state 45

    (29) params -> params COMMA expression .
    (16) expression -> expression . PLUS term
    (17) expression -> expression . MINUS term

    RPAREN          reduce using rule 29 (params -> params COMMA expression .)
    COMMA           reduce using rule 29 (params -> params COMMA expression .)
    PLUS            shift and go to state 14
    MINUS           shift and go to state 15


state 46

    (6) flow_function_call -> VARIABLE LPAREN . params RPAREN
    (29) params -> . params COMMA expression
    (30) params -> . expression
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    params                         shift and go to state 50
    expression                     shift and go to state 28
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 47

    (4) flow_functions -> flow_function_call CONNECT . flow_functions
    (4) flow_functions -> . flow_function_call CONNECT flow_functions
    (5) flow_functions -> . flow_function_call
    (6) flow_function_call -> . VARIABLE LPAREN params RPAREN

    VARIABLE        shift and go to state 39

    flow_function_call             shift and go to state 41
    flow_functions                 shift and go to state 51

state 48

    (11) aggregation_function_call -> NUMBER LPAREN . params RPAREN
    (29) params -> . params COMMA expression
    (30) params -> . expression
    (13) expression -> . term
    (14) expression -> . string_def
    (16) expression -> . expression PLUS term
    (17) expression -> . expression MINUS term
    (18) term -> . exponent
    (19) term -> . term TIMES exponent
    (20) term -> . term DIV exponent
    (15) string_def -> . STRING
    (21) exponent -> . factor
    (22) exponent -> . factor EXP factor
    (23) factor -> . NUMBER
    (24) factor -> . VARIABLE
    (25) factor -> . LPAREN expression RPAREN
    (26) factor -> . function_call
    (27) function_call -> . VARIABLE LPAREN RPAREN
    (28) function_call -> . VARIABLE LPAREN params RPAREN

    STRING          shift and go to state 7
    NUMBER          shift and go to state 9
    VARIABLE        shift and go to state 20
    LPAREN          shift and go to state 10

    params                         shift and go to state 52
    expression                     shift and go to state 28
    term                           shift and go to state 4
    string_def                     shift and go to state 5
    exponent                       shift and go to state 6
    factor                         shift and go to state 8
    function_call                  shift and go to state 11

state 49

    (9) aggregation_functions -> aggregation_function_call CONNECT . aggregation_functions
    (9) aggregation_functions -> . aggregation_function_call CONNECT aggregation_functions
    (10) aggregation_functions -> . aggregation_function_call
    (11) aggregation_function_call -> . NUMBER LPAREN params RPAREN

    NUMBER          shift and go to state 42

    aggregation_function_call      shift and go to state 44
    aggregation_functions          shift and go to state 53

state 50

    (6) flow_function_call -> VARIABLE LPAREN params . RPAREN
    (29) params -> params . COMMA expression

    RPAREN          shift and go to state 54
    COMMA           shift and go to state 38


state 51

    (4) flow_functions -> flow_function_call CONNECT flow_functions .

    $end            reduce using rule 4 (flow_functions -> flow_function_call CONNECT flow_functions .)


state 52

    (11) aggregation_function_call -> NUMBER LPAREN params . RPAREN
    (29) params -> params . COMMA expression

    RPAREN          shift and go to state 55
    COMMA           shift and go to state 38


state 53

    (9) aggregation_functions -> aggregation_function_call CONNECT aggregation_functions .

    $end            reduce using rule 9 (aggregation_functions -> aggregation_function_call CONNECT aggregation_functions .)


state 54

    (6) flow_function_call -> VARIABLE LPAREN params RPAREN .

    CONNECT         reduce using rule 6 (flow_function_call -> VARIABLE LPAREN params RPAREN .)
    $end            reduce using rule 6 (flow_function_call -> VARIABLE LPAREN params RPAREN .)


state 55

    (11) aggregation_function_call -> NUMBER LPAREN params RPAREN .

    CONNECT         reduce using rule 11 (aggregation_function_call -> NUMBER LPAREN params RPAREN .)
    $end            reduce using rule 11 (aggregation_function_call -> NUMBER LPAREN params RPAREN .)

